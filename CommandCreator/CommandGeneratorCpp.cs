// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 12.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace CommandCreator
{
    using System.Linq;
    using System.Text;
    using System.Collections.Generic;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "C:\Users\James\Source\Repos\chainsapm\CommandCreator\CommandGeneratorCpp.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "12.0.0.0")]
    public partial class CommandGeneratorCpp : CommandGeneratorCppBase
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public virtual string TransformText()
        {
            this.Write("/*\r\n *\r\n * This code was generated from the Command Creator.\r\n *\r\n */\r\n\r\n#pragma " +
                    "once\r\n#include \"stdafx.h\"\r\n#include \"");
            
            #line 14 "C:\Users\James\Source\Repos\chainsapm\CommandCreator\CommandGeneratorCpp.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(this.ClassName));
            
            #line default
            #line hidden
            this.Write(".h\"\r\n\r\n\r\nnamespace Commands\r\n{\r\n\t");
            
            #line 19 "C:\Users\James\Source\Repos\chainsapm\CommandCreator\CommandGeneratorCpp.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(this.ClassName));
            
            #line default
            #line hidden
            this.Write("::");
            
            #line 19 "C:\Users\James\Source\Repos\chainsapm\CommandCreator\CommandGeneratorCpp.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(this.ClassName));
            
            #line default
            #line hidden
            this.Write("(__int64 timestamp, ");
            
            #line 19 "C:\Users\James\Source\Repos\chainsapm\CommandCreator\CommandGeneratorCpp.tt"
 foreach (var cpItem in this.ClassProperties) { if (TypeMapping.ContainsKey(cpItem.TypeName)) { 
            
            #line default
            #line hidden
            
            #line 19 "C:\Users\James\Source\Repos\chainsapm\CommandCreator\CommandGeneratorCpp.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TypeMapping[cpItem.TypeName].ToString()));
            
            #line default
            #line hidden
            
            #line 19 "C:\Users\James\Source\Repos\chainsapm\CommandCreator\CommandGeneratorCpp.tt"
 } else { 
            
            #line default
            #line hidden
            
            #line 19 "C:\Users\James\Source\Repos\chainsapm\CommandCreator\CommandGeneratorCpp.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(cpItem.TypeName.ToString()));
            
            #line default
            #line hidden
            
            #line 19 "C:\Users\James\Source\Repos\chainsapm\CommandCreator\CommandGeneratorCpp.tt"
}
            
            #line default
            #line hidden
            this.Write(" ");
            
            #line 19 "C:\Users\James\Source\Repos\chainsapm\CommandCreator\CommandGeneratorCpp.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(cpItem.Name));
            
            #line default
            #line hidden
            
            #line 19 "C:\Users\James\Source\Repos\chainsapm\CommandCreator\CommandGeneratorCpp.tt"
  if (this.ClassProperties.Last().Name != cpItem.Name) { 
            
            #line default
            #line hidden
            this.Write(", ");
            
            #line 19 "C:\Users\James\Source\Repos\chainsapm\CommandCreator\CommandGeneratorCpp.tt"
 } else { } } 
            
            #line default
            #line hidden
            this.Write(")\r\n\t\t: m_timestamp(timestamp), ");
            
            #line 20 "C:\Users\James\Source\Repos\chainsapm\CommandCreator\CommandGeneratorCpp.tt"
 foreach (var cpItem in this.ClassProperties) { 
            
            #line default
            #line hidden
            this.Write(" m_");
            
            #line 20 "C:\Users\James\Source\Repos\chainsapm\CommandCreator\CommandGeneratorCpp.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(cpItem.Name));
            
            #line default
            #line hidden
            this.Write("(");
            
            #line 20 "C:\Users\James\Source\Repos\chainsapm\CommandCreator\CommandGeneratorCpp.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(cpItem.Name));
            
            #line default
            #line hidden
            this.Write(") ");
            
            #line 20 "C:\Users\James\Source\Repos\chainsapm\CommandCreator\CommandGeneratorCpp.tt"
  if (this.ClassProperties.Last().Name != cpItem.Name) { 
            
            #line default
            #line hidden
            this.Write(", ");
            
            #line 20 "C:\Users\James\Source\Repos\chainsapm\CommandCreator\CommandGeneratorCpp.tt"
 } else { } } 
            
            #line default
            #line hidden
            this.Write("\t{\r\n\t}\r\n\r\n\t");
            
            #line 24 "C:\Users\James\Source\Repos\chainsapm\CommandCreator\CommandGeneratorCpp.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(this.ClassName));
            
            #line default
            #line hidden
            this.Write("::~");
            
            #line 24 "C:\Users\James\Source\Repos\chainsapm\CommandCreator\CommandGeneratorCpp.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(this.ClassName));
            
            #line default
            #line hidden
            this.Write("()\r\n\t{\r\n\t}\r\n\r\n\tstd::wstring ");
            
            #line 28 "C:\Users\James\Source\Repos\chainsapm\CommandCreator\CommandGeneratorCpp.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(this.ClassName));
            
            #line default
            #line hidden
            this.Write("::Name()\r\n\t{\r\n\t\treturn L\"");
            
            #line 30 "C:\Users\James\Source\Repos\chainsapm\CommandCreator\CommandGeneratorCpp.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(this.Name));
            
            #line default
            #line hidden
            this.Write("\";\r\n\t}\r\n\r\n\tstd::wstring ");
            
            #line 33 "C:\Users\James\Source\Repos\chainsapm\CommandCreator\CommandGeneratorCpp.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(this.ClassName));
            
            #line default
            #line hidden
            this.Write("::Description()\r\n\t{\r\n\t\treturn L\"");
            
            #line 35 "C:\Users\James\Source\Repos\chainsapm\CommandCreator\CommandGeneratorCpp.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(this.Description));
            
            #line default
            #line hidden
            this.Write("\";\r\n\t}\r\n\r\n\tstd::shared_ptr<std::vector<char>> ");
            
            #line 38 "C:\Users\James\Source\Repos\chainsapm\CommandCreator\CommandGeneratorCpp.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(this.ClassName));
            
            #line default
            #line hidden
            this.Write(@"::Encode()
	{
		if (!hasEncoded)
		{
			// The following items will be resued 
			auto hash = std::hash<std::wstring>();
			size_t hashout = 0;		// Temp var for string hashes
			size_t strlen = 0;		// Temp var for string length
			size_t strbytes = 0;	// Temp var for string bytes

			size_t size = sizeof(__int32)	// len
				+ sizeof(short)				// code
				+ sizeof(__int64);			// timestamp
");
            
            #line 51 "C:\Users\James\Source\Repos\chainsapm\CommandCreator\CommandGeneratorCpp.tt"
 foreach (var cpItem in this.ClassProperties)
{ 
var typeName = "";
if (TypeMapping.ContainsKey(cpItem.TypeName)) { typeName = TypeMapping[cpItem.TypeName].ToString(); } else { typeName =cpItem.TypeName.ToString(); }
if (typeName.ToLower() == "std::wstring")
{
            
            #line default
            #line hidden
            this.Write(" \r\n\t\t\tsize_t strlen_");
            
            #line 57 "C:\Users\James\Source\Repos\chainsapm\CommandCreator\CommandGeneratorCpp.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(cpItem.Name));
            
            #line default
            #line hidden
            this.Write(" = (m_");
            
            #line 57 "C:\Users\James\Source\Repos\chainsapm\CommandCreator\CommandGeneratorCpp.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(cpItem.Name));
            
            #line default
            #line hidden
            this.Write(".length());\r\n\t\t\tsize_t strbytes_");
            
            #line 58 "C:\Users\James\Source\Repos\chainsapm\CommandCreator\CommandGeneratorCpp.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(cpItem.Name));
            
            #line default
            #line hidden
            this.Write(" = strlen_");
            
            #line 58 "C:\Users\James\Source\Repos\chainsapm\CommandCreator\CommandGeneratorCpp.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(cpItem.Name));
            
            #line default
            #line hidden
            this.Write(" * sizeof(wchar_t) + sizeof(wchar_t);\r\n\t\t\tsize += sizeof(__int32);\r\n\t\t\tsize += si" +
                    "zeof(size_t);\r\n\t\t\tsize += strbytes_");
            
            #line 61 "C:\Users\James\Source\Repos\chainsapm\CommandCreator\CommandGeneratorCpp.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(cpItem.Name));
            
            #line default
            #line hidden
            this.Write(";\r\n\r\n");
            
            #line 63 "C:\Users\James\Source\Repos\chainsapm\CommandCreator\CommandGeneratorCpp.tt"
 } else { 
            
            #line default
            #line hidden
            this.Write("\t\t\tsize += sizeof(");
            
            #line 64 "C:\Users\James\Source\Repos\chainsapm\CommandCreator\CommandGeneratorCpp.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(typeName));
            
            #line default
            #line hidden
            this.Write("); // Size of ");
            
            #line 64 "C:\Users\James\Source\Repos\chainsapm\CommandCreator\CommandGeneratorCpp.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(cpItem.Name));
            
            #line default
            #line hidden
            this.Write("\r\n");
            
            #line 65 "C:\Users\James\Source\Repos\chainsapm\CommandCreator\CommandGeneratorCpp.tt"
 } 
            
            #line default
            #line hidden
            
            #line 66 "C:\Users\James\Source\Repos\chainsapm\CommandCreator\CommandGeneratorCpp.tt"
 } 
            
            #line default
            #line hidden
            this.Write(@"			size += sizeof(short);	//Terminator
			

			auto vector = new char[size];
			short term = 0;

			// 
			auto v2 = (char*)memcpy(vector, &size, sizeof(__int32));
			v2 += sizeof(__int32);
			memcpy(v2, &code, sizeof(short));
			v2 += sizeof(short);
			memcpy(v2, &m_timestamp, sizeof(__int64));
			v2 += sizeof(__int64);

");
            
            #line 81 "C:\Users\James\Source\Repos\chainsapm\CommandCreator\CommandGeneratorCpp.tt"
 foreach (var cpItem in this.ClassProperties)
{ 
var typeName = "";
if (TypeMapping.ContainsKey(cpItem.TypeName)) { typeName = TypeMapping[cpItem.TypeName].ToString(); } else { typeName = cpItem.TypeName.ToString(); } 
if (typeName.ToLower() == "std::wstring")
{
            
            #line default
            #line hidden
            this.Write(" \r\n\t\t\t// Regenerate the string information\r\n\t\t\thashout = hash(m_");
            
            #line 88 "C:\Users\James\Source\Repos\chainsapm\CommandCreator\CommandGeneratorCpp.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(cpItem.Name));
            
            #line default
            #line hidden
            this.Write(");\r\n\r\n\t\t\tmemcpy(v2, &strlen_");
            
            #line 90 "C:\Users\James\Source\Repos\chainsapm\CommandCreator\CommandGeneratorCpp.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(cpItem.Name));
            
            #line default
            #line hidden
            this.Write(", sizeof(__int32));\r\n\t\t\tv2 += sizeof(__int32);\r\n\t\t\tmemcpy(v2, &hashout, sizeof(si" +
                    "ze_t));\r\n\t\t\tv2 += sizeof(__int64);\r\n\t\t\tmemcpy(v2, m_");
            
            #line 94 "C:\Users\James\Source\Repos\chainsapm\CommandCreator\CommandGeneratorCpp.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(cpItem.Name));
            
            #line default
            #line hidden
            this.Write(".data(), strbytes_");
            
            #line 94 "C:\Users\James\Source\Repos\chainsapm\CommandCreator\CommandGeneratorCpp.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(cpItem.Name));
            
            #line default
            #line hidden
            this.Write(");\r\n\t\t\tv2 += strbytes_");
            
            #line 95 "C:\Users\James\Source\Repos\chainsapm\CommandCreator\CommandGeneratorCpp.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(cpItem.Name));
            
            #line default
            #line hidden
            this.Write(";\r\n\r\n");
            
            #line 97 "C:\Users\James\Source\Repos\chainsapm\CommandCreator\CommandGeneratorCpp.tt"
 } else { 
            
            #line default
            #line hidden
            this.Write("\t\t\tmemcpy(v2, &m_");
            
            #line 98 "C:\Users\James\Source\Repos\chainsapm\CommandCreator\CommandGeneratorCpp.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(cpItem.Name));
            
            #line default
            #line hidden
            this.Write(", sizeof(");
            
            #line 98 "C:\Users\James\Source\Repos\chainsapm\CommandCreator\CommandGeneratorCpp.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(typeName));
            
            #line default
            #line hidden
            this.Write("));\r\n\t\t\tv2 += sizeof(");
            
            #line 99 "C:\Users\James\Source\Repos\chainsapm\CommandCreator\CommandGeneratorCpp.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(typeName));
            
            #line default
            #line hidden
            this.Write(");\r\n\r\n");
            
            #line 101 "C:\Users\James\Source\Repos\chainsapm\CommandCreator\CommandGeneratorCpp.tt"
 } 
            
            #line default
            #line hidden
            
            #line 102 "C:\Users\James\Source\Repos\chainsapm\CommandCreator\CommandGeneratorCpp.tt"
 } 
            
            #line default
            #line hidden
            this.Write(@"			// Terminator
			memcpy(v2, &term, sizeof(short));
			v2 += sizeof(short);

			hasEncoded = true;
			std::vector<char> v(size);
			v.assign(vector, v2);

			m_internalvector = std::make_shared<std::vector<char>>(v);
		}
		return m_internalvector;
	}

	std::shared_ptr<ICommand> ");
            
            #line 116 "C:\Users\James\Source\Repos\chainsapm\CommandCreator\CommandGeneratorCpp.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(this.ClassName));
            
            #line default
            #line hidden
            this.Write("::Decode(std::shared_ptr<std::vector<char>> &data)\r\n\t{\r\n\t\treturn std::make_shared" +
                    "<");
            
            #line 118 "C:\Users\James\Source\Repos\chainsapm\CommandCreator\CommandGeneratorCpp.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(this.ClassName));
            
            #line default
            #line hidden
            this.Write(">(");
            
            #line 118 "C:\Users\James\Source\Repos\chainsapm\CommandCreator\CommandGeneratorCpp.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(this.ClassName));
            
            #line default
            #line hidden
            this.Write("(m_timestamp, ");
            
            #line 118 "C:\Users\James\Source\Repos\chainsapm\CommandCreator\CommandGeneratorCpp.tt"
 foreach (var cpItem in this.ClassProperties) { 
            
            #line default
            #line hidden
            this.Write(" m_");
            
            #line 118 "C:\Users\James\Source\Repos\chainsapm\CommandCreator\CommandGeneratorCpp.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(cpItem.Name));
            
            #line default
            #line hidden
            this.Write(" ");
            
            #line 118 "C:\Users\James\Source\Repos\chainsapm\CommandCreator\CommandGeneratorCpp.tt"
  if (this.ClassProperties.Last().Name != cpItem.Name) { 
            
            #line default
            #line hidden
            this.Write(", ");
            
            #line 118 "C:\Users\James\Source\Repos\chainsapm\CommandCreator\CommandGeneratorCpp.tt"
 } else { } } 
            
            #line default
            #line hidden
            this.Write("));\r\n\t}\r\n}\r\n\r\n");
            return this.GenerationEnvironment.ToString();
        }
    }
    
    #line default
    #line hidden
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "12.0.0.0")]
    public class CommandGeneratorCppBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        protected System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            var error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            var error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            var returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                var indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                var t = objectToConvert.GetType();
                var method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        /// <summary>
        /// Helper to produce culture-oriented representation of an object as a string
        /// </summary>
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}
